CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)
PROJECT(hpmcpp)

# Build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
OPTION(BUILD_WITH_EXTERNAL_PROJECT "Enable external project build." ON)
IF(NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ENDIF()

# hpmcpp version setup.
SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 3)
SET(VERSION_REVISION 0)
SET(VERSION_STATE b)
SET(VERSION ${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_STATE}${VERSION_REVISION} )

ADD_DEFINITIONS(-DHPMCPP_VERSION="${VERSION}"})

# Compiler options.
MESSAGE(STATUS "Version ${HPMCPP_VERSION}")
IF((CMAKE_COMPILER_IS_GNUCC) AND NOT CMAKE_COMPILER_IS_MINGOW)
	IF(BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8)
		ADD_DEFINITIONS(-fPIC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	ENDIF()

	# Set compile flags.
	ADD_DEFINITIONS(-w -DHC_INTERNAL=1)
	ADD_DEFINITIONS(-I"${CMAKE_CURRENT_SOURCE_DIR}/include")

	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
	ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
	ENDIF()

ELSEIF(MSVC)
	# Enable multi-core complication with MSVC
	ADD_DEFINITIONS(/MP)
ENDIF()

# Set c++ language version required for the project.
IF( CMAKE_COMPILER_IS_GNUCXX )
	SET(LIBSTDC++_LIBRARIES -std=c++0x)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++0x" )
ENDIF( CMAKE_COMPILER_IS_GNUCXX )

FIND_PACKAGE(Git)
IF(GIT_FOUND)
	MESSAGE(STATUS "git found: ${GIT_EXECUTABLE} -- ${GIT_VERSION_STRING}")
ENDIF()

INCLUDE(ExternalProject)
IF(BUILD_WITH_EXTERNAL_PROJECT)
	IF(NOT GIT_FOUND)
		MESSAGE(FATAL_ERROR "Git is required in order to fetch external project hpm")
	ENDIF()

	SET_PROPERTY(DIRECTORY PROPERTY EP_STEP_TARGETS build)

	# Download the hpm library.
	SET(HPM_ROOT ${CMAKE_BINARY_DIR}/deps/hpm)
	SET(HPM_LIB_DIR ${HPM_ROOT}/lib)
	SET(HPM_INCLUDE_DIR ${HPM_ROOT}/include)
	ExternalProject_Add(hpm-external
			PREFIX ${HPM_ROOT}
			GIT_REPOSITORY "https://github.com/voldien/hpm.git"
			GIT_TAG "master"
			UPDATE_COMMAND ""
			PATCH_COMMAND ""
			GIT_PROGRESS True
			SOURCE_DIR ${HPM_ROOT}/src/hpm
			BINARY_DIR ${HPM_ROOT}/src/hpm-build
			INSTALL_DIR ${HPM_ROOT}
			CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
			STEP_TARGETS build make
			BUILD_COMMAND ""
			COMMENT "Building Hpm."
			LOG_DOWNLOAD ON)
	ExternalProject_Get_property(hpm-external SOURCE_DIR)
	MESSAGE(STATUS "Source dir of hpm-external = ${SOURCE_DIR}")
	# Include tasksch headers.
	ADD_LIBRARY(hpm SHARED IMPORTED)
	ADD_DEPENDENCIES(hpm hpm-external)
	SET_TARGET_PROPERTIES(hpm PROPERTIES
			IMPORTED_LOCATION "${HPM_LIB_DIR}/libhpm.so"
			INTERFACE_INCLUDE_DIRECTORIES "${HPM_INCLUDE_DIR}")
ENDIF()

# Source files.
FILE (GLOB headers ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h )
FILE (GLOB core ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp )

# Main library target for initializing the library.
ADD_LIBRARY(hpmcpp ${core})
TARGET_LINK_LIBRARIES(hpmcpp hpm)
IF(BUILD_WITH_EXTERNAL_PROJECT)
	ADD_DEPENDENCIES(hpmcpp hpm-external)
	SET_TARGET_PROPERTIES(hpmcpp PROPERTIES
			INCLUDE_DIRECTORIES ${HPM_INCLUDE_DIR})
ENDIF()

# Add the install targets
INSTALL (TARGETS hpmcpp DESTINATION lib)
INSTALL (FILES ${headers} DESTINATION include/hpmcpp)

# Create distrubtion tarball.
IF( UNIX )
	SET( TARGETDIR "${PROJECT_NAME}-${VERSION}")
	ADD_CUSTOM_TARGET(	distribution
			COMMAND mkdir -p ${TARGETDIR}
			COMMAND cp -r src include CMakeLists.txt LICENSE ${TARGETDIR}
			COMMAND tar cf - ${TARGETDIR} | gzip -c > ${TARGETDIR}.tar.gz
			COMMAND rm -r ${TARGETDIR} )
ENDIF()
