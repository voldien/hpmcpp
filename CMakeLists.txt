CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
PROJECT(hpmcpp VERSION 0.3.0)

# Build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
OPTION(BUILD_WITH_EXTERNAL_PROJECT "Enable external project build." ON)
OPTION(BUILD_WITH_INSTALL "" ON )
IF (NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ENDIF ()

# hpmcpp version setup.
SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 3)
SET(VERSION_REVISION 0)
SET(VERSION_STATE b)
SET(VERSION_NUMBER ${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_STATE})
SET(VERSION ${VERSION_NUMBER}${VERSION_REVISION})

ADD_DEFINITIONS(-DHPMCPP_VERSION="${VERSION}"})

# Compiler options.
MESSAGE(STATUS "Version ${VERSION}")
IF ((CMAKE_COMPILER_IS_GNUCC) AND NOT CMAKE_COMPILER_IS_MINGOW)
	IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8)
		ADD_DEFINITIONS(-fPIC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	ENDIF ()

	# Set compile flags.
	ADD_DEFINITIONS(-w -DHC_INTERNAL=1)

	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
	ELSEIF (CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
	ENDIF ()

ELSEIF (MSVC)
	# Enable multi-core complication with MSVC
	ADD_DEFINITIONS(/MP)
ENDIF ()


SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)


FIND_PACKAGE(Git)
IF(GIT_FOUND)
	MESSAGE(STATUS "git found: ${GIT_EXECUTABLE} -- ${GIT_VERSION_STRING}")
ENDIF()
IF(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
	# Update submodules as needed
	OPTION(GIT_SUBMODULE "Check submodules during build" ON)
	IF(GIT_SUBMODULE)
		MESSAGE(STATUS "Submodule update")
		EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} submodule update --init
						WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
						RESULT_VARIABLE GIT_SUBMOD_RESULT)
		IF(NOT GIT_SUBMOD_RESULT EQUAL "0")
			MESSAGE(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
		ENDIF()
	ENDIF()
ELSE()

ENDIF()

IF (BUILD_WITH_EXTERNAL_PROJECT)
	INCLUDE(ExternalProject)
	IF (NOT GIT_FOUND)
		MESSAGE(FATAL_ERROR "Git is required in order to fetch the external project hpm.")
	ENDIF ()

	SET_PROPERTY(DIRECTORY PROPERTY EP_STEP_TARGETS build)

	# Download the hpm library.
	SET(HPM_ROOT ${CMAKE_CURRENT_BINARY_DIR}/deps/hpm)
	SET(HPM_LIB_DIR ${HPM_ROOT}/lib)
	SET(HPM_INCLUDE_DIR ${HPM_ROOT}/include)
	ExternalProject_Add(hpm-external
			URL ${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm
			SOURCE_DIR ${HPM_ROOT}/src/hpm
			BINARY_DIR ${HPM_ROOT}/src/hpm-build
			INSTALL_DIR ${HPM_ROOT}
			CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DBUILD_TEST=OFF
			STEP_TARGETS build
			COMMENT "Building Hpm."
			LOG_DOWNLOAD ON)
	# Include HPM headers.
	ADD_LIBRARY(hpm SHARED IMPORTED)
	ADD_DEPENDENCIES(hpm hpm-external)
	SET_TARGET_PROPERTIES(hpm PROPERTIES
			IMPORTED_LOCATION ${HPM_LIB_DIR}/libhpm.so
			INTERFACE_LINK_LIBRARIES ${HPM_LIB_DIR}/libhpm.so
				INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm/include)
	SET(HPM_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm/include")
ENDIF ()

# Source files.
FILE(GLOB headers ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)
FILE(GLOB core ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)

# Files.
SET(HEADER_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)
SET(SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/src)
SET(HPM_PUBLIC_HEADERS
		${HEADER_PATH}/HCAABB.h
		${HEADER_PATH}/HCBoundingSphere.h
		${HEADER_PATH}/HCMatrix4x4.h
		${HEADER_PATH}/HCMatrix3x3.h
		${HEADER_PATH}/HCOBB.h
		${HEADER_PATH}/HCONB.h
		${HEADER_PATH}/HCPlane.h
		${HEADER_PATH}/HCQuaternion.h
		${HEADER_PATH}/HCRay.h
		${HEADER_PATH}/HCTypes.h
		${HEADER_PATH}/HCVector2.h
		${HEADER_PATH}/HCVector3.h
		${HEADER_PATH}/HCVector4.h
		${HEADER_PATH}/HpmCpp.h
		)

SET(hpmcpp_core_src
		${SRC_PATH}/hpmcpp.cpp
		${SRC_PATH}/HCAABB.cpp
		${SRC_PATH}/HCBoundingSphere.cpp
		${SRC_PATH}/HCMatrix4x4.cpp
		${SRC_PATH}/HCOBB.cpp
		${SRC_PATH}/HCONB.cpp
		${SRC_PATH}/HCPlane.cpp
		${SRC_PATH}/HCQuaternion.cpp
		${SRC_PATH}/HCVector2.cpp
		${SRC_PATH}/HCVector3.cpp
		${SRC_PATH}/HCVector4.cpp
		)
SOURCE_GROUP(TREE "${CMAKE_CURRENT_SOURCE_DIR}" PREFIX "Source Files" FILES ${hpmcpp_core_src})

SET(hpmcpp_src
		${hpmcpp_core_src}
		${HPM_PUBLIC_HEADERS})

# Main library target for initializing the library.
ADD_LIBRARY(hpmcpp ${hpmcpp_src})
TARGET_LINK_LIBRARIES(hpmcpp hpm)
TARGET_INCLUDE_DIRECTORIES(hpmcpp
		PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
		INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)
TARGET_SOURCES(hpmcpp PRIVATE ${hpmcpp_src})
IF (BUILD_WITH_EXTERNAL_PROJECT)
	ADD_DEPENDENCIES(hpmcpp hpm-external)
	TARGET_INCLUDE_DIRECTORIES(hpmcpp PRIVATE ${HPM_INCLUDE_DIRS})
ENDIF ()
SET_PROPERTY(TARGET hpmcpp PROPERTY CXX_STANDARD 20)
SET_TARGET_PROPERTIES(hpmcpp PROPERTIES
		PUBLIC_HEADERS "${HPM_PUBLIC_HEADERS}"
		LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/lib"
		OUTPUT_NAME "${PROJECT_NAME}"
		#VERSION "${VERSION_NUMBER}"
		)

IF(BUILD_WITH_INSTALL)
	IF(UNIX)
		INCLUDE(GNUInstallDirs)
	ENDIF()
	INSTALL(TARGETS hpmcpp
			PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
			LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
			ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
			)
ENDIF()

# Create distribution tarball.
IF (UNIX)
	Find_PACKAGE(UnixCommands REQUIRED)

	SET(TARGETDIR "${PROJECT_NAME}-${VERSION}")
	ADD_CUSTOM_TARGET(distribution
			COMMAND mkdir -p ${TARGETDIR}
			COMMAND ${CP} -r src include CMakeLists.txt LICENSE ${TARGETDIR}
			COMMAND ${TAR} cf - ${TARGETDIR} | ${GZIP} -c > ${TARGETDIR}.tar.gz
			COMMAND ${RM} -r ${TARGETDIR})
ENDIF ()
