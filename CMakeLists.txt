CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
PROJECT(hpmcpp VERSION 0.3.0)

# Build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
OPTION(BUILD_WITH_EXTERNAL_PROJECT "Enable external project build." ON)
OPTION(BUILD_OPT_BUILD_PACKAGES "Set to ON to generate CPack configuration files and packaging targets" ON)
OPTION(BUILD_WITH_INSTALL "" ON )
IF (NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ENDIF ()

# hpmcpp version setup.
SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 4)
SET(VERSION_REVISION 1)
SET(VERSION_STATE b)
SET(VERSION_NUMBER ${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_STATE})
SET(VERSION ${VERSION_NUMBER}${VERSION_REVISION})


LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules" )

# 
SET(LIBHPMCPP-DEV_COMPONENT "libhpmcpp{VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REVISION}-dev")
SET(CPACK_COMPONENTS_ALL ${LIBHPMCPP-DEV_COMPONENT} )


ADD_DEFINITIONS(-DHPMCPP_VERSION="${VERSION}"})

# Compiler options.
MESSAGE(STATUS "Version ${VERSION}")
IF ((CMAKE_COMPILER_IS_GNUCC) AND NOT CMAKE_COMPILER_IS_MINGOW)
	IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8)
		ADD_DEFINITIONS(-fPIC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	ENDIF ()

	# Set compile flags.
	ADD_DEFINITIONS(-w -DHC_INTERNAL=1)

	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
	ELSEIF (CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
	ENDIF ()

ELSEIF (MSVC)
	# Enable multi-core complication with MSVC
	ADD_DEFINITIONS(/MP)
ENDIF ()



SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)


FIND_PACKAGE(Git)
IF(GIT_FOUND)
	MESSAGE(STATUS "git found: ${GIT_EXECUTABLE} -- ${GIT_VERSION_STRING}")
ENDIF()
IF(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
	# Update submodules as needed
	OPTION(GIT_SUBMODULE "Check submodules during build" ON)
	IF(GIT_SUBMODULE)
		MESSAGE(STATUS "Submodule update")
		EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} submodule update --init
						WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
						RESULT_VARIABLE GIT_SUBMOD_RESULT)
		IF(NOT GIT_SUBMOD_RESULT EQUAL "0")
			MESSAGE(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
		ENDIF()
	ENDIF()
ELSE()

ENDIF()

IF (BUILD_WITH_EXTERNAL_PROJECT)
	INCLUDE(ExternalProject)
	IF (NOT GIT_FOUND)
		MESSAGE(FATAL_ERROR "Git is required in order to fetch the external project hpm.")
	ENDIF ()

	SET_PROPERTY(DIRECTORY PROPERTY EP_STEP_TARGETS build)

	# Download the hpm library.
	SET(HPM_ROOT ${CMAKE_CURRENT_BINARY_DIR}/deps/hpm)
	SET(HPM_LIB_DIR ${HPM_ROOT}/lib)
	SET(HPM_INCLUDE_DIR ${HPM_ROOT}/include)
	ExternalProject_Add(hpm-external
			URL ${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm
			SOURCE_DIR ${HPM_ROOT}/src/hpm
			BINARY_DIR ${HPM_ROOT}/src/hpm-build
			INSTALL_DIR ${HPM_ROOT}
			CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DBUILD_TEST=OFF
			STEP_TARGETS build
			COMMENT "Building Hpm."
			LOG_DOWNLOAD ON)
	# Include HPM headers.
	ADD_LIBRARY(hpm SHARED IMPORTED)
	ADD_DEPENDENCIES(hpm hpm-external)
	SET_TARGET_PROPERTIES(hpm PROPERTIES
			IMPORTED_LOCATION ${HPM_LIB_DIR}/libhpm.so
			INTERFACE_LINK_LIBRARIES ${HPM_LIB_DIR}/libhpm.so
				INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm/include)
	SET(HPM_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm/include")
ENDIF ()

# Source files.
FILE(GLOB headers ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)
FILE(GLOB core ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)

# Files.
SET(HEADER_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)
SET(SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/src)
SET(HPM_PUBLIC_HEADERS
		${HEADER_PATH}/Ext/HCAABB.hpp
		${HEADER_PATH}/Ext/HCBoundingSphere.hpp
		${HEADER_PATH}/HCMatrix4x4.hpp
		${HEADER_PATH}/HCMatrix3x3.hpp
		${HEADER_PATH}/Ext/HCOBB.hpp
		${HEADER_PATH}/Ext/HCONB.hpp
		${HEADER_PATH}/Ext/HCPlane.hpp
		${HEADER_PATH}/HCQuaternion.hpp
		${HEADER_PATH}/Ext/HCRay.hpp
		${HEADER_PATH}/HCTypes.hpp
		${HEADER_PATH}/HCVector2.hpp
		${HEADER_PATH}/HCVector3.hpp
		${HEADER_PATH}/HCVector4.hpp
		${HEADER_PATH}/Hpm.hpp
		)
SET(HPMCPP_INCLUDE_SUB_DIR
				${CMAKE_CURRENT_SOURCE_DIR}/include/)
SOURCE_GROUP(TREE "${CMAKE_CURRENT_SOURCE_DIR}" PREFIX "Include Files" FILES ${HPM_PUBLIC_HEADERS})

SET(hpmcpp_core_src
		${SRC_PATH}/hpmcpp.cpp )
SOURCE_GROUP(TREE "${CMAKE_CURRENT_SOURCE_DIR}" PREFIX "Source Files" FILES ${hpmcpp_core_src})

SET(hpmcpp_src
		${hpmcpp_core_src}
		${HPM_PUBLIC_HEADERS})

# Main library target for initializing the library.
ADD_LIBRARY(hpmcpp ${hpmcpp_src})
TARGET_LINK_LIBRARIES(hpmcpp hpm)
TARGET_INCLUDE_DIRECTORIES(hpmcpp
		PUBLIC ${HEADER_PATH}
    INTERFACE 
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> 
        $<INSTALL_INTERFACE:include/hpmcpp>)
TARGET_SOURCES(hpmcpp PRIVATE ${hpmcpp_core_src})
IF (BUILD_WITH_EXTERNAL_PROJECT)
	ADD_DEPENDENCIES(hpmcpp hpm-external)
	TARGET_INCLUDE_DIRECTORIES(hpmcpp
		PRIVATE ${HPM_INCLUDE_DIRS}
		PUBLIC ${HEADER_PATH}
    INTERFACE 
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> 
        $<INSTALL_INTERFACE:include/hpmcpp>
		 )
ENDIF ()

SET_PROPERTY(TARGET hpmcpp PROPERTY CXX_STANDARD 20)
SET_TARGET_PROPERTIES(hpmcpp PROPERTIES
		#PUBLIC_HEADER "${HPM_PUBLIC_HEADERS}"
		LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/lib"
		OUTPUT_NAME "${PROJECT_NAME}"
		)

IF(BUILD_WITH_INSTALL)
	IF(UNIX)
		INCLUDE(GNUInstallDirs)
	ENDIF()
	INSTALL(DIRECTORY ${HPMCPP_INCLUDE_SUB_DIR} # source directory
			DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/hpmcpp # target directory
			COMPONENT ${LIBHPMCPP-DEV_COMPONENT}
			)
	# INSTALL(TARGETS hpmcpp
	# 		LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	# 		)

	# Create install package.
	IF(CMAKE_CPACK_COMMAND AND UNIX AND BUILD_OPT_BUILD_PACKAGES)
		# Packing information
		SET(CPACK_PACKAGE_NAME                    "hpmcpp${VERSION_MAJOR}.${VERSION_MINOR}")
		SET(CPACK_PACKAGE_CONTACT "Valdemar Lindberg" CACHE STRING "Package maintainer and PGP signer.")
		SET(CPACK_PACKAGE_VENDOR                  "https://github.com/voldien/hpmcpp")
		SET(CPACK_PACKAGE_DISPLAY_NAME            "HPM-CPP ${VERSION}")
		SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY     " -  ${VERSION}")
		SET(CPACK_DEBIAN_PACKAGE_MAINTAINER     "Valdemar Lindberg")
		SET(CPACK_PACKAGE_VERSION                 "${VERSION}.${PACKAGE_VERSION}" )
		SET(CPACK_PACKAGE_VERSION_MAJOR           "${VERSION_MAJOR}")
		SET(CPACK_PACKAGE_VERSION_MINOR           "${VERSION_MINOR}")
		SET(CPACK_PACKAGE_VERSION_PATCH           "${VERSION_PATCH}")
		SET(CPACK_PACKAGE_INSTALL_DIRECTORY       "hpmcpp${VERSION_MAJOR}.${VERSION_MINOR}")
		SET(CPACK_RESOURCE_FILE_LICENSE           "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

		STRING(TOUPPER ${LIBHPMCPP-DEV_COMPONENT} "LIBHPMCPP-DEV_COMPONENT_UPPER")

		#
		SET(CPACK_COMPOENTT_${LIBHPMCPP-DEV_COMPONENT_UPPER}_DISPLAY_NAME "hpmcpp")
		SET(CPACK_COMPONENT_${LIBHPMCPP-DEV_COMPONENT_UPPER}_DEPENDS     "" )
		SET(CPACK_COMPOENTT_${LIBHPMCPP-DEV_COMPONENT_UPPER}_DISPLAY_NAME "")
		SET(CPACK_COMPONENT_${LIBHPMCPP-DEV_COMPONENT_UPPER}_DISPLAY_NAME "common headers and installs")
		SET(CPACK_COMPONENT_${LIBHPMCPP-DEV_COMPONENT_UPPER}_DEPENDS     "" )
		SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake zlib1g-dev pkg-config)

		# debian
		SET(CPACK_GENERATOR "DEB")
		SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
		SET(CPACK_DEBIAN_CMAKE_OPTIONS    "")
		SET(CPACK_DEBIAN_PACKAGE_SECTION  "libs" )
		SET(CPACK_DEBIAN_PACKAGE_DEPENDS  "${CPACK_COMPONENTS_ALL}")
		SET(CPACK_DEBIAN_PACKAGE_SUGGESTS "")
		SET(cPACK_DEBIAN_PACKAGE_NAME     "hpmcpp")
		SET(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES build doc obj samples packaging utils)
		SET(CPACK_DEBIAN_PACKAGE_SOURCE_COPY svn export --force)
		SET(CPACK_DEBIAN_CHANGELOG)
		execute_process(COMMAND lsb_release -is
			OUTPUT_VARIABLE _lsb_distribution OUTPUT_STRIP_TRAILING_WHITESPACE
			RESULT_VARIABLE _lsb_release_failed)
		SET(CPACK_DEBIAN_DISTRIBUTION_NAME ${_lsb_distribution} CACHE STRING "Name of the distrubiton")
		STRING(TOLOWER ${CPACK_DEBIAN_DISTRIBUTION_NAME} CPACK_DEBIAN_DISTRIBUTION_NAME)
		IF( ${CPACK_DEBIAN_DISTRIBUTION_NAME} STREQUAL "ubuntu" )
			SET(CPACK_DEBIAN_DISTRIBUTION_RELEASES lucid maverick natty oneiric precise CACHE STRING "Release code-names of the distrubiton release")
		ENDIF()
		SET(DPUT_HOST "" CACHE STRING "PPA repository to upload the debian sources")

		INCLUDE(CPack)
		INCLUDE(DebSourcePPA)
	ENDIF()

ENDIF()

# Create distribution tarball.
IF (UNIX)
	Find_PACKAGE(UnixCommands REQUIRED)

	SET(TARGETDIR "${PROJECT_NAME}-${VERSION}")
	ADD_CUSTOM_TARGET(distribution
			COMMAND mkdir -p ${TARGETDIR}
			COMMAND ${CP} -r src include CMakeLists.txt LICENSE ${TARGETDIR}
			COMMAND ${TAR} cf - ${TARGETDIR} | ${GZIP} -c > ${TARGETDIR}.tar.gz
			COMMAND ${RM} -r ${TARGETDIR})
ENDIF ()
